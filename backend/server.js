require('dotenv').config();
const express = require('express');
const cors = require('cors');
const axios = require('axios');
const { createClient } = require('@supabase/supabase-js');
const { CohereClient } = require('cohere-ai');// <-- Added Cohere import

const app = express();
app.use(cors());
app.use(express.json());

// Load and verify environment variables
if (!process.env.SUPABASE_URL || !process.env.SUPABASE_KEY || !process.env.COHERE_API_KEY || !process.env.SLACK_WEBHOOK_URL) {
  console.error('❌ Missing one or more required environment variables.');
  process.exit(1);
}

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
const cohere = new CohereClient({ token: process.env.COHERE_API_KEY }); // <-- Initialize Cohere

// Get all todos
app.get('/todos', async (req, res) => {
  const { data, error } = await supabase.from('todos').select('*').order('created_at', { ascending: false });
  if (error) return res.status(500).json({ error: error.message });
  res.json(data);
});

// Create new todo
app.post('/todos', async (req, res) => {
  const { text } = req.body;
  const { data, error } = await supabase
    .from('todos')
    .insert({ text })
    .select()
    .single();

  if (error) return res.status(500).json({ error: error.message });
  res.status(201).json(data);
});

// Update todo
app.put('/todos/:id', async (req, res) => {
  const { id } = req.params;
  const { text } = req.body;

  console.log(`🔧 Updating Todo ID: ${id} with text:`, text); // <-- Debug log

  if (!text) return res.status(400).json({ error: 'Missing "text" in request body' });

  const { data, error } = await supabase
    .from('todos')
    .update({ text })
    .eq('id', id)
    .select()
    .single();

  if (error) return res.status(500).json({ error: error.message });
  res.status(200).json(data);
});

// Delete todo
app.delete('/todos/:id', async (req, res) => {
  const { id } = req.params;

  const { data, error } = await supabase
    .from('todos')
    .delete()
    .eq('id', id)
    .select(); // 👈 select to get deleted data

  if (error) {
    return res.status(500).json({ error: error.message });
  }

  res.status(200).json({ message: 'Deleted', id }); // ✅ always return JSON
});


// Summarize and send to Slack (using Cohere instead of OpenAI)
app.post('/summarize', async (req, res) => {
  const { data: todos, error } = await supabase
    .from('todos')
    .select('text')
    .order('created_at', { ascending: false });

  if (error) {
    console.error('❌ Supabase fetch error:', error.message);
    return res.status(500).json({ success: false, error: error.message });
  }

  if (!todos || todos.length === 0) {
    console.warn('⚠️ No todos found to summarize.');
    return res.status(400).json({ success: false, error: 'No todos to summarize.' });
  }

  const todoText = todos.map((t, i) => `${i + 1}. ${t.text}`).join('\n');
  console.log('📋 Todo List:\n', todoText);

  try {
    // Cohere generate call replacing OpenAI completion
  const response = await cohere.generate({
  model: 'command',
  prompt: `Summarize this to-do list concisely and clearly:\n${todoText}`,
  max_tokens: 100,
  temperature: 0.5,
});

const summary = response.generations[0].text.trim();
console.log('🧠 Summary generated by Cohere:\n', summary);

if (process.env.SLACK_WEBHOOK_URL) {
      try {
        await axios.post(process.env.SLACK_WEBHOOK_URL, {
          text: `📝 *To-Do Summary:*\n${summary}`,
        });
        console.log('✅ Summary sent to Slack.');
      } catch (slackErr) {
        console.error('❌ Slack webhook error:', slackErr.response ? slackErr.response.data : slackErr.message);
        return res.status(500).json({ success: false, error: 'Slack notification failed.' });
      }
    } else {
      console.warn('⚠️ SLACK_WEBHOOK_URL not defined in environment.');
    }

    res.json({ success: true, summary });

  } catch (err) {
    console.error('❌ Error in /summarize route');

    if (err.response) {
      console.error('Response data:', err.response.data);
      console.error('Status:', err.response.status);
      console.error('Headers:', err.response.headers);
    } else if (err.request) {
      console.error('No response received:', err.request);
    } else {
      console.error('Error message:', err.message);
    }

    res.status(500).json({ success: false, error: 'Internal server error in summarize endpoint'});
  }
});

const PORT = process.env.PORT || 4000;
app.listen(PORT, () => console.log(`✅ Server running on http://localhost:${PORT}`));
